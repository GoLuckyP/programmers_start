/*약수 개수와 덧셈*/
//left ~ right 범위의 숫자들에서
//약수의 개수가 짝수인 수는 더하고, 약수의 개수가 홀수인 수는 뺀 수
class Solution {
        // 주어진 d의 범위 left <= d <= right
    // d의 약수 개수 찾기
    // 1. 어떤 수를 나머지가 없이 떨어지는 수는 약수이다.(약수의 정의)
    // 2. d의 약수 a는 양의 정수이고, 1 < a < d이고, d를 a로 나누었을 때 나머지가 없이 떨어진다.
    // 3. 따라서 d / a = b(left를 a로 나눴을 때 몫)이면, 나머지가 없이 떨어지는 d / b = a식이 성립된다.
    // 4. 그러므로 1번 정의에 따라 b는 d의 약수이다.
    // 5. 숫자 a, b는 a < b인 경우, b < a인 경우, a == b인 경우 3가지가 있다.
    //  (1) a < b인 경우 :
    //      a와 b가 서로 다른 값이므로 서로 다른 두 개의 약수를 나타낸다. (a < b 인 약수 a와 b)
    //  (2) a == b인 경우 :
    //      a와 b가 같은 값이기 때문에 하나의 약수를 나타낸다.(제곱근)
    //  (3) a > b인 경우 :
    //      a와 b가 서로 다른 값이므로 서로 다른 두 개의 약수를 나타낸다. (a > b 인 약수 a와 b)
    // 6. (1)번의 경우에서 이미 a(b) >b(a)인 경우까지 구했기 때문에 (3)번의 경우는 약수의 개수를 세지 않아도 된다.
    // 7. 따라서 d의 약수 개수를 찾기 위한 탐색 범위는 (1)번과 (2)번을 만족해야 하므로  0 < a <= d의 제곱근이다.
    // 8. 7번이 만족하면  (0 < a <= d의 제곱근)^2 또한 성립된다.
    public int solution(int left, int right) {
        int result = 0;
        for(int divisor = left; divisor <=right; divisor++){
            int count = 0; // left의 약수 개수를 카운팅 하는 변수 // 새로운 left를 순회할 때마다 다시 초기화 후 카운팅
            int i = 1; // (0 < a <= d의 제곱근)^2 또한 성립으로 i의 범위(d의 약수 개수를 찾기 위한 탐색 범위)는 1<= i * i <= d이다.
            
            while((i * i) <= divisor){
                
                //divisor % i == 0이 true이면 divisor의 약수
                if(divisor % i == 0){
                    
                    //제곱근일 경우 // 위의 증명에서 (2)번의 경우
                    if (divisor / i == i) {
                        count++;
                    }else{
                        // (1)번의 경우만으로 약수 2개를 알 수 있으므로 약수 개수 +2 카운트
                        count +=2;
                    }
                }
                i++;
            }
            
            //약수 개수가 짝수인 left는 더한다
            //약수의 개수가 짝수인 수는 더하고
            if(count % 2 == 0) {
                result += divisor;

            }else{
                //약수의 개수가 홀수인 left는 뺀다
                //약수의 개수가 홀수인 수는 뺀 수
                result -= divisor;
            }
        }

        return result;
    }
}
